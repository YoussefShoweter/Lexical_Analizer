# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets,QtWebEngineWidgets
from ParsingTable import parsing_table, production_rules
from pyvis.network import Network
from uuid import uuid4
from New import Obtain_Tokens_from_text1


class Parser:
    def __init__(self, input_stack):
        self.table = parsing_table
        self.rule = production_rules
        self.parsing_stack = ['$', 0]
        self.input_stack = input_stack
        self.nodes_stack = []
        self.parse_tree = Network(height='100%', width='100%', directed=True)
        self.set_parse_tree_options()

    def set_parse_tree_options(self):
        self.parse_tree.set_options(
            """
                {
                    "nodes": {
                        "size" : "200",
                        "color": "#CB1E1E",
                        "shape": "text"
                    },
                
                    "layout": {
                        "hierarchical": {
                            "sortMethod": "directed"
                        }
                    },
                    "groups": {
                        "terminal": {
                            "size": 300,
                            "shape": "text",
                            "font": {
                                "color": "#0DB219"
                            }
                        },
                        "non-terminal": {
                            "shape": "database",
                            "font": {
                                "color": "#21DEEA"
                            }
                        }
                    },
                    "physics": {
                        "enabled": true,
                        "minVelocity": 0.5,
                        "solver": "repulsion"
                    }
                }
            """
        )

    def parse(self):
        while len(self.input_stack) != 0:
            lookahead = self.input_stack[-1]
            state = self.parsing_stack[-1]
            actions = self.table[state]['actions']
            if lookahead in actions.keys():
                action = actions[lookahead][0]  # 's' | 'r'
                if action == 's':
                    next_state = actions[lookahead][1]
                    self.shift(lookahead, next_state)
                elif action == 'r':
                    rule_no = actions[lookahead][1]
                    self.reduce(rule_no)
                    # Check if it is acceptance rule
                    if rule_no == 1:
                        print("-------Parsing Complete-------")
                        # pop and push s'
                        break
                else:
                    print(
                        "Unrecognized action for this terminal. (Neither 'r' nor 's')")  # Throw Exceptions (may be removed)
                    break
            else:
                print("Unexpected terminal", lookahead)  # Throw Exceptions
                break

    def shift(self, lookahead, next_state):
        self.input_stack.pop()
        self.parsing_stack.append(lookahead)
        self.parsing_stack.append(next_state)
        node_id = str(uuid4())
        self.nodes_stack.append(node_id)
        self.parse_tree.add_node(node_id, label=lookahead, group='terminal', shape='text')
        print(self.parsing_stack)

    def reduce(self, rule_no):
        left_symbol = self.rule[rule_no][0]
        right_symbols = list(self.rule[rule_no][1])

        for symbol in right_symbols[::-1]:
            self.parsing_stack.pop()
            if symbol == self.parsing_stack[-1]:
                self.parsing_stack.pop()
            else:
                print(
                    f"Reduction error in rule {rule_no}: Expected {symbol}, found {self.parsing_stack[-1]}")  # Throw Exceptions
                break
        old_state = self.parsing_stack[-1]
        if left_symbol in self.table[old_state]['goto'].keys():
            next_state = self.table[old_state]['goto'][left_symbol]
            self.parsing_stack.append(left_symbol)
            self.parsing_stack.append(next_state)
            print(self.parsing_stack)
        # else:
        #     print("error3")  # Throw Exceptions
        #     break

        n = len(right_symbols)
        child_nodes_ids = self.nodes_stack[-n:]
        parent_id = str(uuid4())
        self.parse_tree.add_node(parent_id, label=left_symbol, group='non-terminal', shape='text')
        for child_id in child_nodes_ids:
            self.parse_tree.add_edge(parent_id, child_id)
            self.nodes_stack.pop()
        self.nodes_stack.append(parent_id)




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(823, 658)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(40, 500, 531, 51))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 560, 131, 41))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 823, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.legend1 = QtWidgets.QLabel(self.centralwidget)
        self.legend1.setGeometry(QtCore.QRect(600, 470, 200, 20))
        self.legend1.setObjectName("legend1")

        self.legend2 = QtWidgets.QLabel(self.centralwidget)
        self.legend2.setGeometry(QtCore.QRect(600, 500, 200, 20))
        self.legend2.setObjectName("legend2")

        self.legend1.setStyleSheet("background-color: #0DB219;")
        self.legend2.setStyleSheet("background-color: #21DEEA;")

        self.legend1.setText( "Non-Terminal --> Dark green")
        self.legend2.setText( "Terminal --> Lotion Blue")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.webEngineView = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.webEngineView.setGeometry(QtCore.QRect(40, 10, 760, 430))
        self.webEngineView.setObjectName("webEngineView")

        def DrawTree(self):
            rekt = str(self.textEdit.toPlainText())
            print(rekt)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow","SLR(1) Parser Case 4"))

        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Parse"))
        self.textEdit.setPlaceholderText( "Input your Code here")
        self.pushButton.clicked.connect(self.start)



    def start(self):
        token_list = Obtain_Tokens_from_text1(self.textEdit.toPlainText())
        token_list.reverse()
        input_stack = []
        for token in token_list:
            input_stack.append(token["type"])

        rekt=Parser(input_stack)
        rekt.parse()
        rekt.parse_tree.save_graph("Parse Tree.html")



        self.webEngineView.close()

        self.webEngineView.load(QtCore.QUrl.fromLocalFile("\\Parse Tree.html"))
        self.webEngineView.show()



#repeat x:=8; repeat x:=9; repeat x:=z; until c until z x:=9; until y















if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    # philo.setStyleSheet("background-color:lightblue;")
    MainWindow.setWindowIcon(QtGui.QIcon("1.png"))


    sys.exit(app.exec_())
